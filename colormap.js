function Colormap() {
    var _this = this;
    this.length = this.map.length;
}

Colormap.prototype.map = ["rgb(224,236,248)","rgb(224,236,248)","rgb(228,240,248)","rgb(232,240,248)","rgb(232,240,248)","rgb(236,244,248)","rgb(240,244,248)","rgb(240,244,248)","rgb(244,248,248)","rgb(248,248,248)","rgb(252,252,252)","rgb(252,252,252)","rgb(248,252,252)","rgb(248,252,252)","rgb(244,248,252)","rgb(244,248,252)","rgb(240,248,252)","rgb(240,248,252)","rgb(236,244,252)","rgb(236,244,252)","rgb(232,244,252)","rgb(232,240,252)","rgb(228,240,252)","rgb(228,240,252)","rgb(224,240,252)","rgb(220,236,252)","rgb(220,236,252)","rgb(216,236,252)","rgb(216,232,252)","rgb(212,232,252)","rgb(212,232,252)","rgb(208,232,252)","rgb(208,228,252)","rgb(204,228,252)","rgb(204,228,252)","rgb(200,228,252)","rgb(200,224,252)","rgb(196,224,252)","rgb(196,224,252)","rgb(192,220,252)","rgb(188,220,252)","rgb(188,220,252)","rgb(184,220,252)","rgb(184,216,252)","rgb(180,216,252)","rgb(180,216,252)","rgb(176,212,252)","rgb(176,212,252)","rgb(172,212,252)","rgb(172,212,252)","rgb(168,208,252)","rgb(168,208,252)","rgb(164,208,252)","rgb(164,204,252)","rgb(160,204,252)","rgb(156,204,252)","rgb(156,204,252)","rgb(152,200,252)","rgb(152,200,252)","rgb(148,200,252)","rgb(148,200,252)","rgb(144,196,252)","rgb(144,196,252)","rgb(140,196,252)","rgb(140,192,252)","rgb(136,192,252)","rgb(136,192,252)","rgb(132,192,252)","rgb(132,188,252)","rgb(128,188,252)","rgb(124,188,252)","rgb(124,184,252)","rgb(120,184,252)","rgb(120,184,252)","rgb(116,184,252)","rgb(116,180,252)","rgb(112,180,252)","rgb(112,180,252)","rgb(108,176,252)","rgb(108,176,252)","rgb(104,176,252)","rgb(104,176,252)","rgb(100,172,252)","rgb(100,172,252)","rgb(96,172,252)","rgb(92,172,252)","rgb(92,168,252)","rgb(88,168,252)","rgb(88,168,252)","rgb(84,164,252)","rgb(84,164,252)","rgb(80,164,252)","rgb(80,164,252)","rgb(76,160,252)","rgb(76,160,252)","rgb(72,160,252)","rgb(72,156,252)","rgb(68,156,252)","rgb(68,156,252)","rgb(64,156,252)","rgb(60,152,252)","rgb(60,152,252)","rgb(56,152,252)","rgb(56,148,252)","rgb(52,148,252)","rgb(52,148,252)","rgb(48,148,252)","rgb(48,144,252)","rgb(44,144,252)","rgb(44,144,252)","rgb(40,144,252)","rgb(40,140,252)","rgb(36,140,252)","rgb(36,140,252)","rgb(32,136,252)","rgb(28,136,252)","rgb(28,136,252)","rgb(24,136,252)","rgb(24,132,252)","rgb(20,132,252)","rgb(20,132,252)","rgb(16,128,252)","rgb(16,128,252)","rgb(12,128,252)","rgb(12,128,252)","rgb(8,124,252)","rgb(8,124,252)","rgb(4,124,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,252)","rgb(0,120,248)","rgb(0,120,248)","rgb(0,120,248)","rgb(4,120,248)","rgb(8,124,248)","rgb(8,124,248)","rgb(12,124,248)","rgb(16,128,248)","rgb(16,128,248)","rgb(20,128,248)","rgb(24,132,248)","rgb(24,132,248)","rgb(28,132,248)","rgb(32,136,248)","rgb(36,136,248)","rgb(36,140,248)","rgb(40,140,248)","rgb(44,140,248)","rgb(44,144,248)","rgb(48,144,248)","rgb(52,144,248)","rgb(52,148,248)","rgb(56,148,248)","rgb(60,148,248)","rgb(60,152,248)","rgb(64,152,248)","rgb(68,156,248)","rgb(72,156,248)","rgb(72,156,248)","rgb(76,160,248)","rgb(80,160,248)","rgb(80,160,248)","rgb(84,164,248)","rgb(88,164,248)","rgb(88,164,248)","rgb(92,168,248)","rgb(96,168,248)","rgb(96,172,248)","rgb(100,172,248)","rgb(104,172,248)","rgb(108,176,248)","rgb(108,176,248)","rgb(112,176,248)","rgb(116,180,248)","rgb(116,180,248)","rgb(120,180,248)","rgb(124,184,248)","rgb(124,184,248)","rgb(128,188,248)","rgb(132,188,248)","rgb(132,188,248)","rgb(136,192,248)","rgb(140,192,248)","rgb(144,192,248)","rgb(144,196,248)","rgb(148,196,248)","rgb(152,196,248)","rgb(152,200,248)","rgb(156,200,248)","rgb(160,204,248)","rgb(160,204,248)","rgb(164,204,248)","rgb(168,208,248)","rgb(168,208,248)","rgb(172,208,248)","rgb(176,212,248)","rgb(180,212,248)","rgb(180,212,248)","rgb(184,216,248)","rgb(188,216,248)","rgb(188,220,248)","rgb(192,220,248)","rgb(196,220,248)","rgb(196,224,248)","rgb(200,224,248)","rgb(204,224,248)","rgb(204,228,248)","rgb(208,228,248)","rgb(212,228,248)","rgb(216,232,248)","rgb(216,232,248)","rgb(220,236,248)"];

Colormap.prototype.remove = function (arr) {
    var what, a = arguments, L = a.length, ax;
    while (L > 1 && arr.length) {
        what = a[--L];
        while ((ax = arr.indexOf(what)) !== -1) {
            arr.splice(ax, 1);
        }
    }
    return arr;
};

Colormap.prototype.Apply3D = function (table) {
    var _this = this;
    var min = Number.MAX_VALUE;
    var max = -Number.MAX_VALUE;
    var value, x, y;

    for (y in table.yAxis.data) {
        for (x in table.xAxis.data) {
            value = table.data[y][x].value;
            if (value > max) {
                max = value;
            }
            if (value < min) {
                min = value;
            }
        }
    }    

    var step;

    if (Math.abs(max - min) < 0.00000001) {
        step = 1;
    } else {
        step = (this.length - 1) / (max - min);
    }

    

    var _table = $("table[data-name='" + table.name + "']");

    for (y in table.yAxis.data) {
        var row = _table.find("tr[data-y-index=" + y + "]");
        for (x in table.xAxis.data) {
            value = Math.floor((table.data[y][x].value - min) * step);            
            var cell = row.find("td[data-x-index=" + x + "]");           
            cell.css("background-color", _this.map[value]);            
        }
    }
};

Colormap.prototype.Apply2D = function (table) {
    var _this = this;
    var min = Number.MAX_VALUE;
    var max = -Number.MAX_VALUE;

    for (var y in table.yAxis.data) {        
        var value = table.data[y].value;
        if (value > max) {
            max = value;
        }
        if (value < min) {
            min = value;
        }        
    }

    var step = (this.length-1) / (max - min);

    var _table = $("table[data-name='" + table.name + "']");

    for (var y in table.yAxis.data) {        
        var value = Math.round((table.data[y].value - min) * step);
        var cell = _table.find("td[data-y-index=" + y + "]");
        cell.css("background-color", _this.map[value]);        
    }
};

Colormap.prototype.Apply = function (table) {
    if (table.type == "3D") {
        this.Apply3D(table);
    }
    if (table.type == "2D") {
        this.Apply2D(table);
    }
}